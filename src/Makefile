# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/bridger
pkgincludedir = $(includedir)/bridger
pkglibdir = $(libdir)/bridger
pkglibexecdir = $(libexecdir)/bridger
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
bin_PROGRAMS = Assemble$(EXEEXT) PathSearch$(EXEEXT) \
	get_reads_from_graph$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/boost.m4 $(top_srcdir)/ax_boost_base.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_Assemble_OBJECTS = Assemble-utility.$(OBJEXT) \
	Assemble-kmerhash.$(OBJEXT) Assemble-common.$(OBJEXT) \
	Assemble-loadreads.$(OBJEXT) Assemble-splicing_graph.$(OBJEXT) \
	Assemble-assemble.$(OBJEXT)
Assemble_OBJECTS = $(am_Assemble_OBJECTS)
Assemble_LDADD = $(LDADD)
Assemble_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(Assemble_LDFLAGS) $(LDFLAGS) -o $@
am_PathSearch_OBJECTS = PathSearch-utility.$(OBJEXT) \
	PathSearch-kmerhash.$(OBJEXT) PathSearch-common.$(OBJEXT) \
	PathSearch-loadreads.$(OBJEXT) \
	PathSearch-splicing_graph.$(OBJEXT) \
	PathSearch-compatibility_graph.$(OBJEXT) \
	PathSearch-reachability_bp_graph.$(OBJEXT) \
	PathSearch-matching_merge.$(OBJEXT) \
	PathSearch-path_search.$(OBJEXT)
PathSearch_OBJECTS = $(am_PathSearch_OBJECTS)
PathSearch_LDADD = $(LDADD)
PathSearch_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(PathSearch_LDFLAGS) $(LDFLAGS) -o $@
am_get_reads_from_graph_OBJECTS =  \
	get_reads_from_graph-utility.$(OBJEXT) \
	get_reads_from_graph-kmerhash.$(OBJEXT) \
	get_reads_from_graph-common.$(OBJEXT) \
	get_reads_from_graph-loadreads.$(OBJEXT) \
	get_reads_from_graph-splicing_graph.$(OBJEXT) \
	get_reads_from_graph-compatibility_graph.$(OBJEXT) \
	get_reads_from_graph-reachability_bp_graph.$(OBJEXT) \
	get_reads_from_graph-matching_merge.$(OBJEXT) \
	get_reads_from_graph-get_reads_from_graph.$(OBJEXT)
get_reads_from_graph_OBJECTS = $(am_get_reads_from_graph_OBJECTS)
get_reads_from_graph_LDADD = $(LDADD)
get_reads_from_graph_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(get_reads_from_graph_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/build-aux/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(Assemble_SOURCES) $(PathSearch_SOURCES) \
	$(get_reads_from_graph_SOURCES)
DIST_SOURCES = $(Assemble_SOURCES) $(PathSearch_SOURCES) \
	$(get_reads_from_graph_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/czheng/Bridger_r2014-12-01/build-aux/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/czheng/Bridger_r2014-12-01/build-aux/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/czheng/Bridger_r2014-12-01/build-aux/missing --run autoconf
AUTOHEADER = ${SHELL} /home/czheng/Bridger_r2014-12-01/build-aux/missing --run autoheader
AUTOMAKE = ${SHELL} /home/czheng/Bridger_r2014-12-01/build-aux/missing --run automake-1.11
AWK = gawk
BOOST_CPPFLAGS = -I/home/czheng/local/boost//include
BOOST_FILESYSTEM_LDFLAGS = -L/home/czheng/local/boost//lib -Wl,-R/home/czheng/local/boost//lib
BOOST_FILESYSTEM_LDPATH = /home/czheng/local/boost//lib
BOOST_FILESYSTEM_LIBS = -lboost_filesystem
BOOST_LDFLAGS = -L/home/czheng/local/boost//lib
BOOST_LDPATH = /home/czheng/local/boost//lib
BOOST_ROOT = 
BOOST_SERIALIZATION_LDFLAGS = -L/home/czheng/local/boost//lib -Wl,-R/home/czheng/local/boost//lib
BOOST_SERIALIZATION_LDPATH = /home/czheng/local/boost//lib
BOOST_SERIALIZATION_LIBS = -lboost_serialization
BOOST_SYSTEM_LDFLAGS = -L/home/czheng/local/boost//lib -Wl,-R/home/czheng/local/boost//lib
BOOST_SYSTEM_LDPATH = /home/czheng/local/boost//lib
BOOST_SYSTEM_LIBS = -lboost_system
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -Wall -Wno-deprecated -g -gdwarf-2 -Wunused -Wuninitialized -fpermissive -m64 -O3 -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wall -Wno-deprecated -g -gdwarf-2 -Wunused -Wuninitialized -fpermissive -m64 -O3 -g -O2 -I/home/czheng/local/boost//include
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DISTCHECK_CONFIGURE_FLAGS =  '--with-boost=/home/czheng/local/boost/'
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
# Libtool dependencies
LIBTOOL_DEPS = build-aux/ltmain.sh
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/czheng/Bridger_r2014-12-01/build-aux/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = bridger
PACKAGE_BUGREPORT = changzmaths@gmail.com
PACKAGE_NAME = Bridger
PACKAGE_STRING = Bridger r2013-03-21
PACKAGE_TARNAME = bridger
PACKAGE_VERSION = r2013-03-21
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = r2013-03-21
abs_builddir = /home/czheng/Bridger_r2014-12-01/src
abs_srcdir = /home/czheng/Bridger_r2014-12-01/src
abs_top_builddir = /home/czheng/Bridger_r2014-12-01
abs_top_srcdir = /home/czheng/Bridger_r2014-12-01
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/czheng/Bridger_r2014-12-01/build-aux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
AUTOMAKE_OPTIONS = foreign
ACLOCAL_AMFLAGS = -I ../m4
Assemble_SOURCES = utility.cpp kmerhash.cpp common.cpp loadreads.cpp splicing_graph.cpp assemble.cpp utility.h kmerhash.h common.h loadreads.h splicing_graph.h assemble.h
Assemble_CPPFLAGS = -g -Wno-deprecated -static $(CPPFLAGS) 
#Assemble_LDFLAGS = $(BOOST_THREAD_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_SYSTEM_LIBS) $(BOOST_FILESYSTEM_LIBS) $(BOOST_LDFLAGS)
Assemble_LDFLAGS = -lboost_serialization -lboost_system -lboost_filesystem $(BOOST_LDFLAGS)
Assemble_LIBS = $(BOOST_THREAD_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_SYSTEM_LIBS) $(BOOST_FILESYSTEM_LIBS)
PathSearch_SOURCES = utility.cpp kmerhash.cpp common.cpp loadreads.cpp splicing_graph.cpp compatibility_graph.cpp reachability_bp_graph.cpp matching_merge.cpp path_search.cpp
PathSearch_CPPFLAGS = -g -Wno-deprecated -static $(CPPFLAGS)
#PathSearch_LDFLAGS = $(BOOST_THREAD_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_SYSTEM_LIBS) $(BOOST_FILESYSTEM_LIBS) $(BOOST_LDFLAGS)
PathSearch_LDFLAGS = -lboost_serialization -lboost_system -lboost_filesystem $(BOOST_LDFLAGS)
PathSearch_LIBS = $(BOOST_THREAD_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_SYSTEM_LIBS) $(BOOST_FILESYSTEM_LIBS)
get_reads_from_graph_SOURCES = utility.cpp kmerhash.cpp common.cpp loadreads.cpp splicing_graph.cpp compatibility_graph.cpp reachability_bp_graph.cpp matching_merge.cpp get_reads_from_graph.cpp
get_reads_from_graph_CPPFLAGS = -g -Wno-deprecated -static $(CPPFLAGS)
#get_reads_from_graph_LDFLAGS = $(BOOST_THREAD_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_SYSTEM_LIBS) $(BOOST_FILESYSTEM_LIBS) $(BOOST_LDFLAGS)
get_reads_from_graph_LDFLAGS = -lboost_serialization -lboost_system -lboost_filesystem $(BOOST_LDFLAGS)
get_reads_from_graph_LIBS = $(BOOST_THREAD_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_SYSTEM_LIBS) $(BOOST_FILESYSTEM_LIBS)
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
Assemble$(EXEEXT): $(Assemble_OBJECTS) $(Assemble_DEPENDENCIES) 
	@rm -f Assemble$(EXEEXT)
	$(Assemble_LINK) $(Assemble_OBJECTS) $(Assemble_LDADD) $(LIBS)
PathSearch$(EXEEXT): $(PathSearch_OBJECTS) $(PathSearch_DEPENDENCIES) 
	@rm -f PathSearch$(EXEEXT)
	$(PathSearch_LINK) $(PathSearch_OBJECTS) $(PathSearch_LDADD) $(LIBS)
get_reads_from_graph$(EXEEXT): $(get_reads_from_graph_OBJECTS) $(get_reads_from_graph_DEPENDENCIES) 
	@rm -f get_reads_from_graph$(EXEEXT)
	$(get_reads_from_graph_LINK) $(get_reads_from_graph_OBJECTS) $(get_reads_from_graph_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/Assemble-assemble.Po
include ./$(DEPDIR)/Assemble-common.Po
include ./$(DEPDIR)/Assemble-kmerhash.Po
include ./$(DEPDIR)/Assemble-loadreads.Po
include ./$(DEPDIR)/Assemble-splicing_graph.Po
include ./$(DEPDIR)/Assemble-utility.Po
include ./$(DEPDIR)/PathSearch-common.Po
include ./$(DEPDIR)/PathSearch-compatibility_graph.Po
include ./$(DEPDIR)/PathSearch-kmerhash.Po
include ./$(DEPDIR)/PathSearch-loadreads.Po
include ./$(DEPDIR)/PathSearch-matching_merge.Po
include ./$(DEPDIR)/PathSearch-path_search.Po
include ./$(DEPDIR)/PathSearch-reachability_bp_graph.Po
include ./$(DEPDIR)/PathSearch-splicing_graph.Po
include ./$(DEPDIR)/PathSearch-utility.Po
include ./$(DEPDIR)/get_reads_from_graph-common.Po
include ./$(DEPDIR)/get_reads_from_graph-compatibility_graph.Po
include ./$(DEPDIR)/get_reads_from_graph-get_reads_from_graph.Po
include ./$(DEPDIR)/get_reads_from_graph-kmerhash.Po
include ./$(DEPDIR)/get_reads_from_graph-loadreads.Po
include ./$(DEPDIR)/get_reads_from_graph-matching_merge.Po
include ./$(DEPDIR)/get_reads_from_graph-reachability_bp_graph.Po
include ./$(DEPDIR)/get_reads_from_graph-splicing_graph.Po
include ./$(DEPDIR)/get_reads_from_graph-utility.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

Assemble-utility.o: utility.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-utility.o -MD -MP -MF $(DEPDIR)/Assemble-utility.Tpo -c -o Assemble-utility.o `test -f 'utility.cpp' || echo '$(srcdir)/'`utility.cpp
	$(am__mv) $(DEPDIR)/Assemble-utility.Tpo $(DEPDIR)/Assemble-utility.Po
#	source='utility.cpp' object='Assemble-utility.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-utility.o `test -f 'utility.cpp' || echo '$(srcdir)/'`utility.cpp

Assemble-utility.obj: utility.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-utility.obj -MD -MP -MF $(DEPDIR)/Assemble-utility.Tpo -c -o Assemble-utility.obj `if test -f 'utility.cpp'; then $(CYGPATH_W) 'utility.cpp'; else $(CYGPATH_W) '$(srcdir)/utility.cpp'; fi`
	$(am__mv) $(DEPDIR)/Assemble-utility.Tpo $(DEPDIR)/Assemble-utility.Po
#	source='utility.cpp' object='Assemble-utility.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-utility.obj `if test -f 'utility.cpp'; then $(CYGPATH_W) 'utility.cpp'; else $(CYGPATH_W) '$(srcdir)/utility.cpp'; fi`

Assemble-kmerhash.o: kmerhash.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-kmerhash.o -MD -MP -MF $(DEPDIR)/Assemble-kmerhash.Tpo -c -o Assemble-kmerhash.o `test -f 'kmerhash.cpp' || echo '$(srcdir)/'`kmerhash.cpp
	$(am__mv) $(DEPDIR)/Assemble-kmerhash.Tpo $(DEPDIR)/Assemble-kmerhash.Po
#	source='kmerhash.cpp' object='Assemble-kmerhash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-kmerhash.o `test -f 'kmerhash.cpp' || echo '$(srcdir)/'`kmerhash.cpp

Assemble-kmerhash.obj: kmerhash.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-kmerhash.obj -MD -MP -MF $(DEPDIR)/Assemble-kmerhash.Tpo -c -o Assemble-kmerhash.obj `if test -f 'kmerhash.cpp'; then $(CYGPATH_W) 'kmerhash.cpp'; else $(CYGPATH_W) '$(srcdir)/kmerhash.cpp'; fi`
	$(am__mv) $(DEPDIR)/Assemble-kmerhash.Tpo $(DEPDIR)/Assemble-kmerhash.Po
#	source='kmerhash.cpp' object='Assemble-kmerhash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-kmerhash.obj `if test -f 'kmerhash.cpp'; then $(CYGPATH_W) 'kmerhash.cpp'; else $(CYGPATH_W) '$(srcdir)/kmerhash.cpp'; fi`

Assemble-common.o: common.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-common.o -MD -MP -MF $(DEPDIR)/Assemble-common.Tpo -c -o Assemble-common.o `test -f 'common.cpp' || echo '$(srcdir)/'`common.cpp
	$(am__mv) $(DEPDIR)/Assemble-common.Tpo $(DEPDIR)/Assemble-common.Po
#	source='common.cpp' object='Assemble-common.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-common.o `test -f 'common.cpp' || echo '$(srcdir)/'`common.cpp

Assemble-common.obj: common.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-common.obj -MD -MP -MF $(DEPDIR)/Assemble-common.Tpo -c -o Assemble-common.obj `if test -f 'common.cpp'; then $(CYGPATH_W) 'common.cpp'; else $(CYGPATH_W) '$(srcdir)/common.cpp'; fi`
	$(am__mv) $(DEPDIR)/Assemble-common.Tpo $(DEPDIR)/Assemble-common.Po
#	source='common.cpp' object='Assemble-common.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-common.obj `if test -f 'common.cpp'; then $(CYGPATH_W) 'common.cpp'; else $(CYGPATH_W) '$(srcdir)/common.cpp'; fi`

Assemble-loadreads.o: loadreads.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-loadreads.o -MD -MP -MF $(DEPDIR)/Assemble-loadreads.Tpo -c -o Assemble-loadreads.o `test -f 'loadreads.cpp' || echo '$(srcdir)/'`loadreads.cpp
	$(am__mv) $(DEPDIR)/Assemble-loadreads.Tpo $(DEPDIR)/Assemble-loadreads.Po
#	source='loadreads.cpp' object='Assemble-loadreads.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-loadreads.o `test -f 'loadreads.cpp' || echo '$(srcdir)/'`loadreads.cpp

Assemble-loadreads.obj: loadreads.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-loadreads.obj -MD -MP -MF $(DEPDIR)/Assemble-loadreads.Tpo -c -o Assemble-loadreads.obj `if test -f 'loadreads.cpp'; then $(CYGPATH_W) 'loadreads.cpp'; else $(CYGPATH_W) '$(srcdir)/loadreads.cpp'; fi`
	$(am__mv) $(DEPDIR)/Assemble-loadreads.Tpo $(DEPDIR)/Assemble-loadreads.Po
#	source='loadreads.cpp' object='Assemble-loadreads.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-loadreads.obj `if test -f 'loadreads.cpp'; then $(CYGPATH_W) 'loadreads.cpp'; else $(CYGPATH_W) '$(srcdir)/loadreads.cpp'; fi`

Assemble-splicing_graph.o: splicing_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-splicing_graph.o -MD -MP -MF $(DEPDIR)/Assemble-splicing_graph.Tpo -c -o Assemble-splicing_graph.o `test -f 'splicing_graph.cpp' || echo '$(srcdir)/'`splicing_graph.cpp
	$(am__mv) $(DEPDIR)/Assemble-splicing_graph.Tpo $(DEPDIR)/Assemble-splicing_graph.Po
#	source='splicing_graph.cpp' object='Assemble-splicing_graph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-splicing_graph.o `test -f 'splicing_graph.cpp' || echo '$(srcdir)/'`splicing_graph.cpp

Assemble-splicing_graph.obj: splicing_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-splicing_graph.obj -MD -MP -MF $(DEPDIR)/Assemble-splicing_graph.Tpo -c -o Assemble-splicing_graph.obj `if test -f 'splicing_graph.cpp'; then $(CYGPATH_W) 'splicing_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/splicing_graph.cpp'; fi`
	$(am__mv) $(DEPDIR)/Assemble-splicing_graph.Tpo $(DEPDIR)/Assemble-splicing_graph.Po
#	source='splicing_graph.cpp' object='Assemble-splicing_graph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-splicing_graph.obj `if test -f 'splicing_graph.cpp'; then $(CYGPATH_W) 'splicing_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/splicing_graph.cpp'; fi`

Assemble-assemble.o: assemble.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-assemble.o -MD -MP -MF $(DEPDIR)/Assemble-assemble.Tpo -c -o Assemble-assemble.o `test -f 'assemble.cpp' || echo '$(srcdir)/'`assemble.cpp
	$(am__mv) $(DEPDIR)/Assemble-assemble.Tpo $(DEPDIR)/Assemble-assemble.Po
#	source='assemble.cpp' object='Assemble-assemble.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-assemble.o `test -f 'assemble.cpp' || echo '$(srcdir)/'`assemble.cpp

Assemble-assemble.obj: assemble.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Assemble-assemble.obj -MD -MP -MF $(DEPDIR)/Assemble-assemble.Tpo -c -o Assemble-assemble.obj `if test -f 'assemble.cpp'; then $(CYGPATH_W) 'assemble.cpp'; else $(CYGPATH_W) '$(srcdir)/assemble.cpp'; fi`
	$(am__mv) $(DEPDIR)/Assemble-assemble.Tpo $(DEPDIR)/Assemble-assemble.Po
#	source='assemble.cpp' object='Assemble-assemble.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Assemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Assemble-assemble.obj `if test -f 'assemble.cpp'; then $(CYGPATH_W) 'assemble.cpp'; else $(CYGPATH_W) '$(srcdir)/assemble.cpp'; fi`

PathSearch-utility.o: utility.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-utility.o -MD -MP -MF $(DEPDIR)/PathSearch-utility.Tpo -c -o PathSearch-utility.o `test -f 'utility.cpp' || echo '$(srcdir)/'`utility.cpp
	$(am__mv) $(DEPDIR)/PathSearch-utility.Tpo $(DEPDIR)/PathSearch-utility.Po
#	source='utility.cpp' object='PathSearch-utility.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-utility.o `test -f 'utility.cpp' || echo '$(srcdir)/'`utility.cpp

PathSearch-utility.obj: utility.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-utility.obj -MD -MP -MF $(DEPDIR)/PathSearch-utility.Tpo -c -o PathSearch-utility.obj `if test -f 'utility.cpp'; then $(CYGPATH_W) 'utility.cpp'; else $(CYGPATH_W) '$(srcdir)/utility.cpp'; fi`
	$(am__mv) $(DEPDIR)/PathSearch-utility.Tpo $(DEPDIR)/PathSearch-utility.Po
#	source='utility.cpp' object='PathSearch-utility.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-utility.obj `if test -f 'utility.cpp'; then $(CYGPATH_W) 'utility.cpp'; else $(CYGPATH_W) '$(srcdir)/utility.cpp'; fi`

PathSearch-kmerhash.o: kmerhash.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-kmerhash.o -MD -MP -MF $(DEPDIR)/PathSearch-kmerhash.Tpo -c -o PathSearch-kmerhash.o `test -f 'kmerhash.cpp' || echo '$(srcdir)/'`kmerhash.cpp
	$(am__mv) $(DEPDIR)/PathSearch-kmerhash.Tpo $(DEPDIR)/PathSearch-kmerhash.Po
#	source='kmerhash.cpp' object='PathSearch-kmerhash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-kmerhash.o `test -f 'kmerhash.cpp' || echo '$(srcdir)/'`kmerhash.cpp

PathSearch-kmerhash.obj: kmerhash.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-kmerhash.obj -MD -MP -MF $(DEPDIR)/PathSearch-kmerhash.Tpo -c -o PathSearch-kmerhash.obj `if test -f 'kmerhash.cpp'; then $(CYGPATH_W) 'kmerhash.cpp'; else $(CYGPATH_W) '$(srcdir)/kmerhash.cpp'; fi`
	$(am__mv) $(DEPDIR)/PathSearch-kmerhash.Tpo $(DEPDIR)/PathSearch-kmerhash.Po
#	source='kmerhash.cpp' object='PathSearch-kmerhash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-kmerhash.obj `if test -f 'kmerhash.cpp'; then $(CYGPATH_W) 'kmerhash.cpp'; else $(CYGPATH_W) '$(srcdir)/kmerhash.cpp'; fi`

PathSearch-common.o: common.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-common.o -MD -MP -MF $(DEPDIR)/PathSearch-common.Tpo -c -o PathSearch-common.o `test -f 'common.cpp' || echo '$(srcdir)/'`common.cpp
	$(am__mv) $(DEPDIR)/PathSearch-common.Tpo $(DEPDIR)/PathSearch-common.Po
#	source='common.cpp' object='PathSearch-common.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-common.o `test -f 'common.cpp' || echo '$(srcdir)/'`common.cpp

PathSearch-common.obj: common.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-common.obj -MD -MP -MF $(DEPDIR)/PathSearch-common.Tpo -c -o PathSearch-common.obj `if test -f 'common.cpp'; then $(CYGPATH_W) 'common.cpp'; else $(CYGPATH_W) '$(srcdir)/common.cpp'; fi`
	$(am__mv) $(DEPDIR)/PathSearch-common.Tpo $(DEPDIR)/PathSearch-common.Po
#	source='common.cpp' object='PathSearch-common.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-common.obj `if test -f 'common.cpp'; then $(CYGPATH_W) 'common.cpp'; else $(CYGPATH_W) '$(srcdir)/common.cpp'; fi`

PathSearch-loadreads.o: loadreads.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-loadreads.o -MD -MP -MF $(DEPDIR)/PathSearch-loadreads.Tpo -c -o PathSearch-loadreads.o `test -f 'loadreads.cpp' || echo '$(srcdir)/'`loadreads.cpp
	$(am__mv) $(DEPDIR)/PathSearch-loadreads.Tpo $(DEPDIR)/PathSearch-loadreads.Po
#	source='loadreads.cpp' object='PathSearch-loadreads.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-loadreads.o `test -f 'loadreads.cpp' || echo '$(srcdir)/'`loadreads.cpp

PathSearch-loadreads.obj: loadreads.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-loadreads.obj -MD -MP -MF $(DEPDIR)/PathSearch-loadreads.Tpo -c -o PathSearch-loadreads.obj `if test -f 'loadreads.cpp'; then $(CYGPATH_W) 'loadreads.cpp'; else $(CYGPATH_W) '$(srcdir)/loadreads.cpp'; fi`
	$(am__mv) $(DEPDIR)/PathSearch-loadreads.Tpo $(DEPDIR)/PathSearch-loadreads.Po
#	source='loadreads.cpp' object='PathSearch-loadreads.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-loadreads.obj `if test -f 'loadreads.cpp'; then $(CYGPATH_W) 'loadreads.cpp'; else $(CYGPATH_W) '$(srcdir)/loadreads.cpp'; fi`

PathSearch-splicing_graph.o: splicing_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-splicing_graph.o -MD -MP -MF $(DEPDIR)/PathSearch-splicing_graph.Tpo -c -o PathSearch-splicing_graph.o `test -f 'splicing_graph.cpp' || echo '$(srcdir)/'`splicing_graph.cpp
	$(am__mv) $(DEPDIR)/PathSearch-splicing_graph.Tpo $(DEPDIR)/PathSearch-splicing_graph.Po
#	source='splicing_graph.cpp' object='PathSearch-splicing_graph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-splicing_graph.o `test -f 'splicing_graph.cpp' || echo '$(srcdir)/'`splicing_graph.cpp

PathSearch-splicing_graph.obj: splicing_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-splicing_graph.obj -MD -MP -MF $(DEPDIR)/PathSearch-splicing_graph.Tpo -c -o PathSearch-splicing_graph.obj `if test -f 'splicing_graph.cpp'; then $(CYGPATH_W) 'splicing_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/splicing_graph.cpp'; fi`
	$(am__mv) $(DEPDIR)/PathSearch-splicing_graph.Tpo $(DEPDIR)/PathSearch-splicing_graph.Po
#	source='splicing_graph.cpp' object='PathSearch-splicing_graph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-splicing_graph.obj `if test -f 'splicing_graph.cpp'; then $(CYGPATH_W) 'splicing_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/splicing_graph.cpp'; fi`

PathSearch-compatibility_graph.o: compatibility_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-compatibility_graph.o -MD -MP -MF $(DEPDIR)/PathSearch-compatibility_graph.Tpo -c -o PathSearch-compatibility_graph.o `test -f 'compatibility_graph.cpp' || echo '$(srcdir)/'`compatibility_graph.cpp
	$(am__mv) $(DEPDIR)/PathSearch-compatibility_graph.Tpo $(DEPDIR)/PathSearch-compatibility_graph.Po
#	source='compatibility_graph.cpp' object='PathSearch-compatibility_graph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-compatibility_graph.o `test -f 'compatibility_graph.cpp' || echo '$(srcdir)/'`compatibility_graph.cpp

PathSearch-compatibility_graph.obj: compatibility_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-compatibility_graph.obj -MD -MP -MF $(DEPDIR)/PathSearch-compatibility_graph.Tpo -c -o PathSearch-compatibility_graph.obj `if test -f 'compatibility_graph.cpp'; then $(CYGPATH_W) 'compatibility_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/compatibility_graph.cpp'; fi`
	$(am__mv) $(DEPDIR)/PathSearch-compatibility_graph.Tpo $(DEPDIR)/PathSearch-compatibility_graph.Po
#	source='compatibility_graph.cpp' object='PathSearch-compatibility_graph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-compatibility_graph.obj `if test -f 'compatibility_graph.cpp'; then $(CYGPATH_W) 'compatibility_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/compatibility_graph.cpp'; fi`

PathSearch-reachability_bp_graph.o: reachability_bp_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-reachability_bp_graph.o -MD -MP -MF $(DEPDIR)/PathSearch-reachability_bp_graph.Tpo -c -o PathSearch-reachability_bp_graph.o `test -f 'reachability_bp_graph.cpp' || echo '$(srcdir)/'`reachability_bp_graph.cpp
	$(am__mv) $(DEPDIR)/PathSearch-reachability_bp_graph.Tpo $(DEPDIR)/PathSearch-reachability_bp_graph.Po
#	source='reachability_bp_graph.cpp' object='PathSearch-reachability_bp_graph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-reachability_bp_graph.o `test -f 'reachability_bp_graph.cpp' || echo '$(srcdir)/'`reachability_bp_graph.cpp

PathSearch-reachability_bp_graph.obj: reachability_bp_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-reachability_bp_graph.obj -MD -MP -MF $(DEPDIR)/PathSearch-reachability_bp_graph.Tpo -c -o PathSearch-reachability_bp_graph.obj `if test -f 'reachability_bp_graph.cpp'; then $(CYGPATH_W) 'reachability_bp_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/reachability_bp_graph.cpp'; fi`
	$(am__mv) $(DEPDIR)/PathSearch-reachability_bp_graph.Tpo $(DEPDIR)/PathSearch-reachability_bp_graph.Po
#	source='reachability_bp_graph.cpp' object='PathSearch-reachability_bp_graph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-reachability_bp_graph.obj `if test -f 'reachability_bp_graph.cpp'; then $(CYGPATH_W) 'reachability_bp_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/reachability_bp_graph.cpp'; fi`

PathSearch-matching_merge.o: matching_merge.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-matching_merge.o -MD -MP -MF $(DEPDIR)/PathSearch-matching_merge.Tpo -c -o PathSearch-matching_merge.o `test -f 'matching_merge.cpp' || echo '$(srcdir)/'`matching_merge.cpp
	$(am__mv) $(DEPDIR)/PathSearch-matching_merge.Tpo $(DEPDIR)/PathSearch-matching_merge.Po
#	source='matching_merge.cpp' object='PathSearch-matching_merge.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-matching_merge.o `test -f 'matching_merge.cpp' || echo '$(srcdir)/'`matching_merge.cpp

PathSearch-matching_merge.obj: matching_merge.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-matching_merge.obj -MD -MP -MF $(DEPDIR)/PathSearch-matching_merge.Tpo -c -o PathSearch-matching_merge.obj `if test -f 'matching_merge.cpp'; then $(CYGPATH_W) 'matching_merge.cpp'; else $(CYGPATH_W) '$(srcdir)/matching_merge.cpp'; fi`
	$(am__mv) $(DEPDIR)/PathSearch-matching_merge.Tpo $(DEPDIR)/PathSearch-matching_merge.Po
#	source='matching_merge.cpp' object='PathSearch-matching_merge.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-matching_merge.obj `if test -f 'matching_merge.cpp'; then $(CYGPATH_W) 'matching_merge.cpp'; else $(CYGPATH_W) '$(srcdir)/matching_merge.cpp'; fi`

PathSearch-path_search.o: path_search.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-path_search.o -MD -MP -MF $(DEPDIR)/PathSearch-path_search.Tpo -c -o PathSearch-path_search.o `test -f 'path_search.cpp' || echo '$(srcdir)/'`path_search.cpp
	$(am__mv) $(DEPDIR)/PathSearch-path_search.Tpo $(DEPDIR)/PathSearch-path_search.Po
#	source='path_search.cpp' object='PathSearch-path_search.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-path_search.o `test -f 'path_search.cpp' || echo '$(srcdir)/'`path_search.cpp

PathSearch-path_search.obj: path_search.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PathSearch-path_search.obj -MD -MP -MF $(DEPDIR)/PathSearch-path_search.Tpo -c -o PathSearch-path_search.obj `if test -f 'path_search.cpp'; then $(CYGPATH_W) 'path_search.cpp'; else $(CYGPATH_W) '$(srcdir)/path_search.cpp'; fi`
	$(am__mv) $(DEPDIR)/PathSearch-path_search.Tpo $(DEPDIR)/PathSearch-path_search.Po
#	source='path_search.cpp' object='PathSearch-path_search.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PathSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PathSearch-path_search.obj `if test -f 'path_search.cpp'; then $(CYGPATH_W) 'path_search.cpp'; else $(CYGPATH_W) '$(srcdir)/path_search.cpp'; fi`

get_reads_from_graph-utility.o: utility.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-utility.o -MD -MP -MF $(DEPDIR)/get_reads_from_graph-utility.Tpo -c -o get_reads_from_graph-utility.o `test -f 'utility.cpp' || echo '$(srcdir)/'`utility.cpp
	$(am__mv) $(DEPDIR)/get_reads_from_graph-utility.Tpo $(DEPDIR)/get_reads_from_graph-utility.Po
#	source='utility.cpp' object='get_reads_from_graph-utility.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-utility.o `test -f 'utility.cpp' || echo '$(srcdir)/'`utility.cpp

get_reads_from_graph-utility.obj: utility.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-utility.obj -MD -MP -MF $(DEPDIR)/get_reads_from_graph-utility.Tpo -c -o get_reads_from_graph-utility.obj `if test -f 'utility.cpp'; then $(CYGPATH_W) 'utility.cpp'; else $(CYGPATH_W) '$(srcdir)/utility.cpp'; fi`
	$(am__mv) $(DEPDIR)/get_reads_from_graph-utility.Tpo $(DEPDIR)/get_reads_from_graph-utility.Po
#	source='utility.cpp' object='get_reads_from_graph-utility.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-utility.obj `if test -f 'utility.cpp'; then $(CYGPATH_W) 'utility.cpp'; else $(CYGPATH_W) '$(srcdir)/utility.cpp'; fi`

get_reads_from_graph-kmerhash.o: kmerhash.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-kmerhash.o -MD -MP -MF $(DEPDIR)/get_reads_from_graph-kmerhash.Tpo -c -o get_reads_from_graph-kmerhash.o `test -f 'kmerhash.cpp' || echo '$(srcdir)/'`kmerhash.cpp
	$(am__mv) $(DEPDIR)/get_reads_from_graph-kmerhash.Tpo $(DEPDIR)/get_reads_from_graph-kmerhash.Po
#	source='kmerhash.cpp' object='get_reads_from_graph-kmerhash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-kmerhash.o `test -f 'kmerhash.cpp' || echo '$(srcdir)/'`kmerhash.cpp

get_reads_from_graph-kmerhash.obj: kmerhash.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-kmerhash.obj -MD -MP -MF $(DEPDIR)/get_reads_from_graph-kmerhash.Tpo -c -o get_reads_from_graph-kmerhash.obj `if test -f 'kmerhash.cpp'; then $(CYGPATH_W) 'kmerhash.cpp'; else $(CYGPATH_W) '$(srcdir)/kmerhash.cpp'; fi`
	$(am__mv) $(DEPDIR)/get_reads_from_graph-kmerhash.Tpo $(DEPDIR)/get_reads_from_graph-kmerhash.Po
#	source='kmerhash.cpp' object='get_reads_from_graph-kmerhash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-kmerhash.obj `if test -f 'kmerhash.cpp'; then $(CYGPATH_W) 'kmerhash.cpp'; else $(CYGPATH_W) '$(srcdir)/kmerhash.cpp'; fi`

get_reads_from_graph-common.o: common.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-common.o -MD -MP -MF $(DEPDIR)/get_reads_from_graph-common.Tpo -c -o get_reads_from_graph-common.o `test -f 'common.cpp' || echo '$(srcdir)/'`common.cpp
	$(am__mv) $(DEPDIR)/get_reads_from_graph-common.Tpo $(DEPDIR)/get_reads_from_graph-common.Po
#	source='common.cpp' object='get_reads_from_graph-common.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-common.o `test -f 'common.cpp' || echo '$(srcdir)/'`common.cpp

get_reads_from_graph-common.obj: common.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-common.obj -MD -MP -MF $(DEPDIR)/get_reads_from_graph-common.Tpo -c -o get_reads_from_graph-common.obj `if test -f 'common.cpp'; then $(CYGPATH_W) 'common.cpp'; else $(CYGPATH_W) '$(srcdir)/common.cpp'; fi`
	$(am__mv) $(DEPDIR)/get_reads_from_graph-common.Tpo $(DEPDIR)/get_reads_from_graph-common.Po
#	source='common.cpp' object='get_reads_from_graph-common.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-common.obj `if test -f 'common.cpp'; then $(CYGPATH_W) 'common.cpp'; else $(CYGPATH_W) '$(srcdir)/common.cpp'; fi`

get_reads_from_graph-loadreads.o: loadreads.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-loadreads.o -MD -MP -MF $(DEPDIR)/get_reads_from_graph-loadreads.Tpo -c -o get_reads_from_graph-loadreads.o `test -f 'loadreads.cpp' || echo '$(srcdir)/'`loadreads.cpp
	$(am__mv) $(DEPDIR)/get_reads_from_graph-loadreads.Tpo $(DEPDIR)/get_reads_from_graph-loadreads.Po
#	source='loadreads.cpp' object='get_reads_from_graph-loadreads.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-loadreads.o `test -f 'loadreads.cpp' || echo '$(srcdir)/'`loadreads.cpp

get_reads_from_graph-loadreads.obj: loadreads.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-loadreads.obj -MD -MP -MF $(DEPDIR)/get_reads_from_graph-loadreads.Tpo -c -o get_reads_from_graph-loadreads.obj `if test -f 'loadreads.cpp'; then $(CYGPATH_W) 'loadreads.cpp'; else $(CYGPATH_W) '$(srcdir)/loadreads.cpp'; fi`
	$(am__mv) $(DEPDIR)/get_reads_from_graph-loadreads.Tpo $(DEPDIR)/get_reads_from_graph-loadreads.Po
#	source='loadreads.cpp' object='get_reads_from_graph-loadreads.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-loadreads.obj `if test -f 'loadreads.cpp'; then $(CYGPATH_W) 'loadreads.cpp'; else $(CYGPATH_W) '$(srcdir)/loadreads.cpp'; fi`

get_reads_from_graph-splicing_graph.o: splicing_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-splicing_graph.o -MD -MP -MF $(DEPDIR)/get_reads_from_graph-splicing_graph.Tpo -c -o get_reads_from_graph-splicing_graph.o `test -f 'splicing_graph.cpp' || echo '$(srcdir)/'`splicing_graph.cpp
	$(am__mv) $(DEPDIR)/get_reads_from_graph-splicing_graph.Tpo $(DEPDIR)/get_reads_from_graph-splicing_graph.Po
#	source='splicing_graph.cpp' object='get_reads_from_graph-splicing_graph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-splicing_graph.o `test -f 'splicing_graph.cpp' || echo '$(srcdir)/'`splicing_graph.cpp

get_reads_from_graph-splicing_graph.obj: splicing_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-splicing_graph.obj -MD -MP -MF $(DEPDIR)/get_reads_from_graph-splicing_graph.Tpo -c -o get_reads_from_graph-splicing_graph.obj `if test -f 'splicing_graph.cpp'; then $(CYGPATH_W) 'splicing_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/splicing_graph.cpp'; fi`
	$(am__mv) $(DEPDIR)/get_reads_from_graph-splicing_graph.Tpo $(DEPDIR)/get_reads_from_graph-splicing_graph.Po
#	source='splicing_graph.cpp' object='get_reads_from_graph-splicing_graph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-splicing_graph.obj `if test -f 'splicing_graph.cpp'; then $(CYGPATH_W) 'splicing_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/splicing_graph.cpp'; fi`

get_reads_from_graph-compatibility_graph.o: compatibility_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-compatibility_graph.o -MD -MP -MF $(DEPDIR)/get_reads_from_graph-compatibility_graph.Tpo -c -o get_reads_from_graph-compatibility_graph.o `test -f 'compatibility_graph.cpp' || echo '$(srcdir)/'`compatibility_graph.cpp
	$(am__mv) $(DEPDIR)/get_reads_from_graph-compatibility_graph.Tpo $(DEPDIR)/get_reads_from_graph-compatibility_graph.Po
#	source='compatibility_graph.cpp' object='get_reads_from_graph-compatibility_graph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-compatibility_graph.o `test -f 'compatibility_graph.cpp' || echo '$(srcdir)/'`compatibility_graph.cpp

get_reads_from_graph-compatibility_graph.obj: compatibility_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-compatibility_graph.obj -MD -MP -MF $(DEPDIR)/get_reads_from_graph-compatibility_graph.Tpo -c -o get_reads_from_graph-compatibility_graph.obj `if test -f 'compatibility_graph.cpp'; then $(CYGPATH_W) 'compatibility_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/compatibility_graph.cpp'; fi`
	$(am__mv) $(DEPDIR)/get_reads_from_graph-compatibility_graph.Tpo $(DEPDIR)/get_reads_from_graph-compatibility_graph.Po
#	source='compatibility_graph.cpp' object='get_reads_from_graph-compatibility_graph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-compatibility_graph.obj `if test -f 'compatibility_graph.cpp'; then $(CYGPATH_W) 'compatibility_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/compatibility_graph.cpp'; fi`

get_reads_from_graph-reachability_bp_graph.o: reachability_bp_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-reachability_bp_graph.o -MD -MP -MF $(DEPDIR)/get_reads_from_graph-reachability_bp_graph.Tpo -c -o get_reads_from_graph-reachability_bp_graph.o `test -f 'reachability_bp_graph.cpp' || echo '$(srcdir)/'`reachability_bp_graph.cpp
	$(am__mv) $(DEPDIR)/get_reads_from_graph-reachability_bp_graph.Tpo $(DEPDIR)/get_reads_from_graph-reachability_bp_graph.Po
#	source='reachability_bp_graph.cpp' object='get_reads_from_graph-reachability_bp_graph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-reachability_bp_graph.o `test -f 'reachability_bp_graph.cpp' || echo '$(srcdir)/'`reachability_bp_graph.cpp

get_reads_from_graph-reachability_bp_graph.obj: reachability_bp_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-reachability_bp_graph.obj -MD -MP -MF $(DEPDIR)/get_reads_from_graph-reachability_bp_graph.Tpo -c -o get_reads_from_graph-reachability_bp_graph.obj `if test -f 'reachability_bp_graph.cpp'; then $(CYGPATH_W) 'reachability_bp_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/reachability_bp_graph.cpp'; fi`
	$(am__mv) $(DEPDIR)/get_reads_from_graph-reachability_bp_graph.Tpo $(DEPDIR)/get_reads_from_graph-reachability_bp_graph.Po
#	source='reachability_bp_graph.cpp' object='get_reads_from_graph-reachability_bp_graph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-reachability_bp_graph.obj `if test -f 'reachability_bp_graph.cpp'; then $(CYGPATH_W) 'reachability_bp_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/reachability_bp_graph.cpp'; fi`

get_reads_from_graph-matching_merge.o: matching_merge.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-matching_merge.o -MD -MP -MF $(DEPDIR)/get_reads_from_graph-matching_merge.Tpo -c -o get_reads_from_graph-matching_merge.o `test -f 'matching_merge.cpp' || echo '$(srcdir)/'`matching_merge.cpp
	$(am__mv) $(DEPDIR)/get_reads_from_graph-matching_merge.Tpo $(DEPDIR)/get_reads_from_graph-matching_merge.Po
#	source='matching_merge.cpp' object='get_reads_from_graph-matching_merge.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-matching_merge.o `test -f 'matching_merge.cpp' || echo '$(srcdir)/'`matching_merge.cpp

get_reads_from_graph-matching_merge.obj: matching_merge.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-matching_merge.obj -MD -MP -MF $(DEPDIR)/get_reads_from_graph-matching_merge.Tpo -c -o get_reads_from_graph-matching_merge.obj `if test -f 'matching_merge.cpp'; then $(CYGPATH_W) 'matching_merge.cpp'; else $(CYGPATH_W) '$(srcdir)/matching_merge.cpp'; fi`
	$(am__mv) $(DEPDIR)/get_reads_from_graph-matching_merge.Tpo $(DEPDIR)/get_reads_from_graph-matching_merge.Po
#	source='matching_merge.cpp' object='get_reads_from_graph-matching_merge.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-matching_merge.obj `if test -f 'matching_merge.cpp'; then $(CYGPATH_W) 'matching_merge.cpp'; else $(CYGPATH_W) '$(srcdir)/matching_merge.cpp'; fi`

get_reads_from_graph-get_reads_from_graph.o: get_reads_from_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-get_reads_from_graph.o -MD -MP -MF $(DEPDIR)/get_reads_from_graph-get_reads_from_graph.Tpo -c -o get_reads_from_graph-get_reads_from_graph.o `test -f 'get_reads_from_graph.cpp' || echo '$(srcdir)/'`get_reads_from_graph.cpp
	$(am__mv) $(DEPDIR)/get_reads_from_graph-get_reads_from_graph.Tpo $(DEPDIR)/get_reads_from_graph-get_reads_from_graph.Po
#	source='get_reads_from_graph.cpp' object='get_reads_from_graph-get_reads_from_graph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-get_reads_from_graph.o `test -f 'get_reads_from_graph.cpp' || echo '$(srcdir)/'`get_reads_from_graph.cpp

get_reads_from_graph-get_reads_from_graph.obj: get_reads_from_graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT get_reads_from_graph-get_reads_from_graph.obj -MD -MP -MF $(DEPDIR)/get_reads_from_graph-get_reads_from_graph.Tpo -c -o get_reads_from_graph-get_reads_from_graph.obj `if test -f 'get_reads_from_graph.cpp'; then $(CYGPATH_W) 'get_reads_from_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/get_reads_from_graph.cpp'; fi`
	$(am__mv) $(DEPDIR)/get_reads_from_graph-get_reads_from_graph.Tpo $(DEPDIR)/get_reads_from_graph-get_reads_from_graph.Po
#	source='get_reads_from_graph.cpp' object='get_reads_from_graph-get_reads_from_graph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(get_reads_from_graph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o get_reads_from_graph-get_reads_from_graph.obj `if test -f 'get_reads_from_graph.cpp'; then $(CYGPATH_W) 'get_reads_from_graph.cpp'; else $(CYGPATH_W) '$(srcdir)/get_reads_from_graph.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
